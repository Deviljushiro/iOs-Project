
import UIKit
import CoreData

class CLASS: UIViewController, (UITableViewDataSource, UITableViewDelegate) {


    // MARK: - Variables
    
    ...
    

    // MARK: - Outlet
    
    ...
    
    // MARK: - View Loading
    
    /// What the view has to load before be printed
    override func viewDidLoad() {
        super.viewDidLoad()
	
	/** QUERY / FETCH **/
	
        //get the context
        guard let context = self.getContext(errorMsg: "Person not found") else { return }
        //create query related to the Personne entity
        let request : NSFetchRequest<Personne> = Personne.fetchRequest()
        do {
            try self.listePersonnes = context.fetch(request)
        }
        catch let error as NSError{
            self.alertError(WithTitle: "\(error)", andMsg: "\(error.userInfo)")
            return
        }
    }

    /// Tell if viex receive a warning
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    // MARK: - OBJECT data management
    
    /// create a new OBJECT and save it
    ///
    /// - Parameters:
    ///     - nom: lastname of the OBJECT
    ///     - prenom: firstname of the OBJECT
    func saveNewOBJECT(withLastName nom: String, andFirstname prenom: String){
        //get the context
        guard let context = self.getContext(errorMsg: "Save failed")
            else {
                return
        }
        //create a OBJECT
        let person = NSManagedObject / ENTITY(context: context)
        //modify profile
        person.nom = nom
        person.prenom = prenom
        do{
            try context.save()
            self.listePersonnes.append(person)
        }
        catch let error as NSError{
                self.alert(error: error)
                return
        }
    }
    
    /// delete a OBJECT
    ///
    /// - Parameter index: index of the related person
    /// - Returns: TRUE if deleted, FALSE else
    func delete(personWithIndex index: Int) ->Bool {
        guard let context = self.getContext(errorMsg: "Couldn't delete")
            else { return false }
        let person = self.listePersonnes[index]
        context.delete(person)
        do {
            try context.save()
            self.listePersonnes.remove(at: index)
            return true
        }
        catch let error as NSError {
            self.alert(error: error)
            return false
        }
    }
    
    
    // MARK: - TableView data source protocol
    
    /// Define the cell of the tableview
    ///
    /// - Parameters:
    ///   - tableView: Tableview related
    ///   - indexPath: the index of each cell
    /// - Returns: the cell with the defined values
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell{
        let cell = self.Personnes.dequeueReusableCell(withIdentifier: "personCell", for: indexPath) as! ListTableViewCell
        cell.nom.text = self.listePersonnes[indexPath.row].nom
        cell.prenom.text = self.listePersonnes[indexPath.row].prenom
        return cell
    }

    /// Tell the number of sections
    ///
    /// - Parameters:
    ///   - tableView: Table view related
    ///   - section: number of lines for each section
    /// - Returns: number of sections
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        return self.listePersonnes.count
    }
    
    /// Tell if a tableview can be edited
    ///
    /// - Parameters:
    ///   - tableView: tableview related
    ///   - indexPath: index for the table
    /// - Returns: YES the table can be edited or NO
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }

    /// Edit a tableview
    ///
    /// - Parameters:
    ///   - tableView: tableview related
    ///   - editingStyle: what type of edition
    ///   - indexPath: index of each cell
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath){
        //manage deleting
        if (editingStyle==UITableViewCellEditingStyle.delete){
            self.Personnes.beginUpdates()
            if self.delete(personWithIndex: indexPath.row){
                self.Personnes.deleteRows(at: [indexPath], with: UITableViewRowAnimation.automatic)
            }
            self.Personnes.endUpdates()
        }
    }

    
    // MARK: - Button
    
    
    /// Go to the Add page
    ///
    /// - Parameter sender: the object itself
    @IBAction func addAction(_ sender: Any) {
        self.performSegue(withIdentifier: "addSegue", sender: self)
    }

    
    
    /// When datas need to be obtained from the previous page
    ///
    /// - Parameter segue: The segue related to the previous page
    @IBAction func unwindToPersonsListAfterSaving(segue: UIStoryboardSegue){
        print("I'm back")
        let addController = segue.source as! AddViewController
        let firstname = addController.prenomLabel.text ?? ""
        let lastname = addController.nomLabel.text ?? ""
        self.saveNewPerson(withLastName: lastname, andFirstname: firstname)
        self.Personnes.reloadData()
        }


    // MARK: - Navigation
     
     
     
    /** NAVIGATION A FAIRE **/
    
    
    
    // MARK: - Helper methods
    
    ///get context of core data
    ///
    /// - Parameters: 
    ///     - errorMsg: main error msg
    ///     - userInfoMsg: additional info user want to display
    /// - Returns: context of the core data
    func getContext(errorMsg: String, userInfoMsg: String = "could not retrieve data context") -> NSManagedObjectContext? {
        
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            //assertionFailure("No Application Delegate!")
            self.alertError(WithTitle: errorMsg, andMsg: userInfoMsg)
            return nil
        }
        return appDelegate.persistentContainer.viewContext
    }
    
    // MARK: - Alerts
    
    /// When need to send an alert with the alert methode
    ///
    /// - Parameters:
    ///   - error: error title
    ///   - user: message from the user
    func alertError(WithTitle error: String, andMsg user: String = "") {
        let alert = UIAlertController(title: error, message: user, preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "Ok", style: .default)
        alert.addAction(cancelAction)
        present(alert, animated: true)
    }
    
    /// When an error is caught
    ///
    /// - Parameter error: NSError caught
    func alert(error: NSError) {
        self.alertError(WithTitle: "\(error)", andMsg: "\(error.userInfo)")
    }

}
